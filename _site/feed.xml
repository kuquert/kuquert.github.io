<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-11-26T22:01:45-02:00</updated><id>http://localhost:4000/</id><title type="html">Kuquert</title><subtitle>Randon thinkery box for diverse ideas</subtitle><author><name>Marcus Kuquert</name></author><entry><title type="html">Building a chatbot for Tinder</title><link href="http://localhost:4000/blog/2018/04/03/tinder-conversation-algorithm.html" rel="alternate" type="text/html" title="Building a chatbot for Tinder" /><published>2018-04-03T00:00:00-03:00</published><updated>2018-04-03T00:00:00-03:00</updated><id>http://localhost:4000/blog/2018/04/03/tinder-conversation-algorithm</id><content type="html" xml:base="http://localhost:4000/blog/2018/04/03/tinder-conversation-algorithm.html">&lt;p&gt;My vision on design for developers:
https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886&lt;/p&gt;

&lt;p&gt;Information architecture:
  Make examples of complex interfaces and its solution:&lt;/p&gt;

&lt;p&gt;Understanding the domain of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Conversation&quot;&gt;conversation&lt;/a&gt;
Biblio:
https://books.google.com.br/books?id=oCRi-KQN37AC&amp;amp;pg=PT17&amp;amp;redir_esc=y#v=onepage&amp;amp;q&amp;amp;f=false
https://www.scienceofpeople.com/10-steps-to-the-perfect-conversation/&lt;/p&gt;

&lt;h2 id=&quot;start-a-conversation&quot;&gt;Start a conversation&lt;/h2&gt;

&lt;h1&gt;#&lt;/h1&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">My vision on design for developers: https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886 Information architecture: Make examples of complex interfaces and its solution: Understanding the domain of a conversation Biblio: https://books.google.com.br/books?id=oCRi-KQN37AC&amp;amp;pg=PT17&amp;amp;redir_esc=y#v=onepage&amp;amp;q&amp;amp;f=false https://www.scienceofpeople.com/10-steps-to-the-perfect-conversation/ Start a conversation #</summary></entry><entry><title type="html">What I learned being outside from social networks for the last 3 months</title><link href="http://localhost:4000/blog/2018/03/29/3-months-without-social-networks.html" rel="alternate" type="text/html" title="What I learned being outside from social networks for the last 3 months" /><published>2018-03-29T00:00:00-03:00</published><updated>2018-03-29T00:00:00-03:00</updated><id>http://localhost:4000/blog/2018/03/29/3-months-without-social-networks</id><content type="html" xml:base="http://localhost:4000/blog/2018/03/29/3-months-without-social-networks.html">&lt;p&gt;Explicar sobre abstinência, colocar referencia do lastweektonight(video sobre social networks), e video do gregorio sobre o mesmo assunto&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explicar o momento dos escandalos envolvendo as redes.&lt;/li&gt;
  &lt;li&gt;Como eu preencho o tempo livre?!
    &lt;ul&gt;
      &lt;li&gt;Explicar que não noto que tenho mais tempo livre, ainda, pq uso o twitter.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Isolamento&lt;/li&gt;
  &lt;li&gt;Aniversário, como foi passar um aniversário sem ~quase~ ninguem lembrar.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">Explicar sobre abstinência, colocar referencia do lastweektonight(video sobre social networks), e video do gregorio sobre o mesmo assunto Explicar o momento dos escandalos envolvendo as redes. Como eu preencho o tempo livre?! Explicar que não noto que tenho mais tempo livre, ainda, pq uso o twitter. Isolamento Aniversário, como foi passar um aniversário sem ~quase~ ninguem lembrar.</summary></entry><entry><title type="html">Software Engineering Toolbox</title><link href="http://localhost:4000/blog/2018/03/08/software-engineering-toolbox.html" rel="alternate" type="text/html" title="Software Engineering Toolbox" /><published>2018-03-08T00:00:00-03:00</published><updated>2018-03-08T00:00:00-03:00</updated><id>http://localhost:4000/blog/2018/03/08/software-engineering-toolbox</id><content type="html" xml:base="http://localhost:4000/blog/2018/03/08/software-engineering-toolbox.html">&lt;h1 id=&quot;uml-cheatsheet&quot;&gt;UML Cheatsheet&lt;/h1&gt;
&lt;p&gt;Normalmente uso UML apenas em whiteboard, então esse cheatsheet é bem bom.&lt;/p&gt;

&lt;p&gt;http://www.loufranco.com/wp-content/uploads/2012/11/cheatsheet.pdf&lt;/p&gt;

&lt;p&gt;http://www.exinfm.com/training/M2C4/UML_Notation_Guide.pdf&lt;/p&gt;

&lt;h1 id=&quot;books&quot;&gt;Books&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Tanembaum (Sisop e redes)&lt;/li&gt;
  &lt;li&gt;Harikrishna (DB)&lt;/li&gt;
  &lt;li&gt;Sommerville (ES)&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">UML Cheatsheet Normalmente uso UML apenas em whiteboard, então esse cheatsheet é bem bom. http://www.loufranco.com/wp-content/uploads/2012/11/cheatsheet.pdf http://www.exinfm.com/training/M2C4/UML_Notation_Guide.pdf Books Tanembaum (Sisop e redes) Harikrishna (DB) Sommerville (ES)</summary></entry><entry><title type="html">Cool Terminal things</title><link href="http://localhost:4000/blog/2018/03/07/terminal-tools.html" rel="alternate" type="text/html" title="Cool Terminal things" /><published>2018-03-07T00:00:00-03:00</published><updated>2018-03-07T00:00:00-03:00</updated><id>http://localhost:4000/blog/2018/03/07/terminal-tools</id><content type="html" xml:base="http://localhost:4000/blog/2018/03/07/terminal-tools.html">&lt;h1 id=&quot;explain-shell&quot;&gt;Explain shell&lt;/h1&gt;
&lt;p&gt;https://explainshell.com/&lt;/p&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">Explain shell https://explainshell.com/</summary></entry><entry><title type="html">DeepX Elixir cheatsheet</title><link href="http://localhost:4000/blog/2018/02/28/deepx-elixir-cheatsheet.html" rel="alternate" type="text/html" title="DeepX Elixir cheatsheet" /><published>2018-02-28T00:00:00-03:00</published><updated>2018-02-28T00:00:00-03:00</updated><id>http://localhost:4000/blog/2018/02/28/deepx-elixir-cheatsheet</id><content type="html" xml:base="http://localhost:4000/blog/2018/02/28/deepx-elixir-cheatsheet.html">&lt;h2 id=&quot;running-an-application&quot;&gt;Running an application&lt;/h2&gt;
&lt;p&gt;1 - Up docker in background
Make sure you have the docker-compose.yml file descirbing our dockers.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2 - Create topics used by the service&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it notificationservice_kafka_1 bash # runs the bassh in current docker isntance of kafka.

kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic user
kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic camp
kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic logging
kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic organization
kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic notification
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3 - Setup database&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix ecto.setup # Setup is not a native ecto command, its an alias for [&quot;ecto.create&quot;, &quot;ecto.migrate&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;kafka-console-producer.sh –property parse.key=true –property key.separator=, –broker-list localhost:9092 –topic user&lt;/p&gt;

&lt;p&gt;1- Kafka console consumer/producer with a KEY:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Producer
kafka-console-producer.sh --property parse.key=true --property key.separator=, --broker-list localhost:9092 --topic &amp;lt;&amp;lt;topic-name&amp;gt;&amp;gt;

#Consumer
kafka-console-consumer.sh --bootstrap-server localhost:9092 --property print.key=true --property key.separator=, --topic &amp;lt;&amp;lt;topic-name&amp;gt;&amp;gt;

#List all from beginning
kafka-console-consumer.sh --bootstrap-server localhost:9092 --property print.key=true --property key.separator=, --topic &amp;lt;&amp;lt;topic-name&amp;gt;&amp;gt; --from-beginning | grep &quot;filter-string&quot;


kafka-console-consumer.sh --bootstrap-server localhost:9092 --property print.key=true --property key.separator=, --topic notfy --from-beginning | grep &quot;filter-string&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2 - Create topics:&lt;/p&gt;

&lt;p&gt;3 - Describe topics:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kafka-topics.sh --zookeeper zookeeper:2181 --describe --topic camp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before push:
mix test –cover &amp;amp;&amp;amp; mix credo -a&lt;/p&gt;

&lt;p&gt;4 - Hierarchy of Messages:
&lt;code class=&quot;highlighter-rouge&quot;&gt;Topic -&amp;gt; Partition(n+) -&amp;gt; Msg (n+)&lt;/code&gt;
Remeber that partitions are defined by a hash of its key.&lt;/p&gt;

&lt;p&gt;Default value to function declaration&lt;/p&gt;

&lt;p&gt;def bla(message, key // nil).&lt;/p&gt;

&lt;p&gt;To create a new lib with an application.
mix new –sup naom-of-app&lt;/p&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">Running an application 1 - Up docker in background Make sure you have the docker-compose.yml file descirbing our dockers. docker-compose up -d 2 - Create topics used by the service docker exec -it notificationservice_kafka_1 bash # runs the bassh in current docker isntance of kafka. kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic user kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic camp kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic logging kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic organization kafka-topics.sh --zookeeper zookeeper:2181 --create --partitions 50 --replication-factor 1 --topic notification 3 - Setup database mix ecto.setup # Setup is not a native ecto command, its an alias for [&quot;ecto.create&quot;, &quot;ecto.migrate&quot;] Troubleshooting kafka-console-producer.sh –property parse.key=true –property key.separator=, –broker-list localhost:9092 –topic user 1- Kafka console consumer/producer with a KEY: # Producer kafka-console-producer.sh --property parse.key=true --property key.separator=, --broker-list localhost:9092 --topic &amp;lt;&amp;lt;topic-name&amp;gt;&amp;gt; #Consumer kafka-console-consumer.sh --bootstrap-server localhost:9092 --property print.key=true --property key.separator=, --topic &amp;lt;&amp;lt;topic-name&amp;gt;&amp;gt; #List all from beginning kafka-console-consumer.sh --bootstrap-server localhost:9092 --property print.key=true --property key.separator=, --topic &amp;lt;&amp;lt;topic-name&amp;gt;&amp;gt; --from-beginning | grep &quot;filter-string&quot; kafka-console-consumer.sh --bootstrap-server localhost:9092 --property print.key=true --property key.separator=, --topic notfy --from-beginning | grep &quot;filter-string&quot; 2 - Create topics: 3 - Describe topics: kafka-topics.sh --zookeeper zookeeper:2181 --describe --topic camp Before push: mix test –cover &amp;amp;&amp;amp; mix credo -a 4 - Hierarchy of Messages: Topic -&amp;gt; Partition(n+) -&amp;gt; Msg (n+) Remeber that partitions are defined by a hash of its key. Default value to function declaration def bla(message, key // nil). To create a new lib with an application. mix new –sup naom-of-app</summary></entry><entry><title type="html">Renovator PUC-RS</title><link href="http://localhost:4000/blog/2018/02/20/pucrs-renovator.html" rel="alternate" type="text/html" title="Renovator PUC-RS" /><published>2018-02-20T00:00:00-03:00</published><updated>2018-02-20T00:00:00-03:00</updated><id>http://localhost:4000/blog/2018/02/20/pucrs-renovator</id><content type="html" xml:base="http://localhost:4000/blog/2018/02/20/pucrs-renovator.html">&lt;h3 id=&quot;what-is-an-otp-aplication&quot;&gt;What is an OTP aplication??&lt;/h3&gt;
&lt;p&gt;It refers to the –app option on &lt;code class=&quot;highlighter-rouge&quot;&gt;phx.new&lt;/code&gt;  command.&lt;/p&gt;

&lt;p&gt;list of commands&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;my_api | &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my_api &lt;span class=&quot;c&quot;&gt;# creates a folder to store the project&lt;/span&gt;
mix phx.new &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-html&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# creates a new phoenix project&lt;/span&gt;
mix phx.server &lt;span class=&quot;c&quot;&gt;# NOOOOO, error appears.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[error image here]&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix deps.get

mix ecto.create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;New we need a machine withg the configurations to run our new server.
For that we use docker, with a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Resources:
https://github.com/rbeene/phoenix-with-docker&lt;/p&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">What is an OTP aplication?? It refers to the –app option on phx.new command. list of commands mkdir my_api | cd my_api # creates a folder to store the project mix phx.new . --no-html # creates a new phoenix project mix phx.server # NOOOOO, error appears. [error image here] mix deps.get mix ecto.create New we need a machine withg the configurations to run our new server. For that we use docker, with a docker-compose.yml file. Resources: https://github.com/rbeene/phoenix-with-docker</summary></entry><entry><title type="html">Twitter scheduler with Elixir</title><link href="http://localhost:4000/blog/2018/02/19/twitter-cheduler-with-phoenix.html" rel="alternate" type="text/html" title="Twitter scheduler with Elixir" /><published>2018-02-19T00:00:00-03:00</published><updated>2018-02-19T00:00:00-03:00</updated><id>http://localhost:4000/blog/2018/02/19/twitter-cheduler-with-phoenix</id><content type="html" xml:base="http://localhost:4000/blog/2018/02/19/twitter-cheduler-with-phoenix.html">&lt;p&gt;Resources:
https://app.pluralsight.com/library/courses/elixir-getting-started&lt;/p&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">Resources: https://app.pluralsight.com/library/courses/elixir-getting-started</summary></entry><entry><title type="html">First steps on Elixir and Phoenix</title><link href="http://localhost:4000/blog/2018/02/19/first-steps-on-elixir-and-phoenix.html" rel="alternate" type="text/html" title="First steps on Elixir and Phoenix" /><published>2018-02-19T00:00:00-03:00</published><updated>2018-02-19T00:00:00-03:00</updated><id>http://localhost:4000/blog/2018/02/19/first-steps-on-elixir-and-phoenix</id><content type="html" xml:base="http://localhost:4000/blog/2018/02/19/first-steps-on-elixir-and-phoenix.html">&lt;h2 id=&quot;good-services-to-watch-insde-realm&quot;&gt;Good services to watch insde Realm&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;nation-broker
    &lt;blockquote&gt;
      &lt;p&gt;example of scheduler, translator and sending messages.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;notification-service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Live reloading&lt;/strong&gt; is built-in
Phoenix uses node.js
Phoenix uses &lt;strong&gt;Brunch&lt;/strong&gt; to build js and css assets.&lt;/p&gt;

&lt;h3 id=&quot;scheme-scheme2&quot;&gt;scheme &lt;code class=&quot;highlighter-rouge&quot;&gt;scheme/2&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Scheme is the equivalent to an SQL Table, is a macro defined in EctoScheme.&lt;/p&gt;

&lt;p&gt;use NationBorker:&lt;/p&gt;

&lt;h3 id=&quot;import-macro&quot;&gt;Import macro:&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt; macro is defined with &lt;strong&gt;using&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;this is a good way to organize commum imports.
the &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; macro, 
the &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt; macro,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; keyword defines a constant macro&lt;/p&gt;

&lt;p&gt;nation_broker_msg is good place to see the defines contants.
On line 11 it returns the :message_bus and assign it to @message_bus&lt;/p&gt;

&lt;h3 id=&quot;quote-and-unquote&quot;&gt;Quote and unquote&lt;/h3&gt;
&lt;p&gt;Serach about that, seams really cool. Spoiler: This is a way to declare differnt implementation depending on the module.&lt;/p&gt;

&lt;h3 id=&quot;ecto&quot;&gt;Ecto&lt;/h3&gt;
&lt;p&gt;To create a new table:
➜  user-service git:(CG-159_bold_calc_costs_updates) mix ecto.gen.migration create_push_token_import_records_table&lt;/p&gt;

&lt;p&gt;Ecto changeset 
example:
defmodule NotificationService.PushToken do
    # This just make sure the entrance is valid, and not expose db to invalid entries, and avoid IO usage.
    def changeset(struct, params \ %{}) do # We need this changeset to insert things in the db, for this we need sonme transofrmations. All provided by Ecto, our little friend
    struct
    |&amp;gt; cast(params, @fields) # Make casts to adjust types, and check if anything breaks.
    |&amp;gt; validate_required(@required_fields) # Check no null canstraints.
    |&amp;gt; unique_constraint(:user_id) # Check unique_id constraint.
    |&amp;gt; foreign_key_constraint(:user_id) # Check for 
    end
end&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This is a schema&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotificationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PushNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PushToken&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This just make sure the entrance is valid, and not expose db to invalid entries, and avoid IO usage.&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotificationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:model&lt;/span&gt; 
  
   &lt;span class=&quot;c1&quot;&gt;# We need this changeset to insert things in the db, for this we need sonme transofrmations. All provided by Ecto, our little friend&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Make casts to adjust types, and check if anything breaks.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validate_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@required_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Check no null canstraints.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Check unique_id constraint.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreign_key_constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Check for &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotificationServiceMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PushTokenConsumer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a Consumer&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotificationServiceMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:consumer&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;data&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;action&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;created&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PushNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert_push_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#This is a shortcut to patternmatching, in case of errors this will break in the `dead letter queue`&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defmodule NotificationService.PushNotification do # This is a Context.
  alias NotificationService.Repo
  alias NotificationService.PushNotification.PushToken

  def insert_push_token(push_token_params) do
    %PushToken{
      id: Ecto.UUID.generate()# This add a uuid for the to_insert push token.
    }
    |&amp;gt; changeset(push_token_params)
    |&amp;gt; Repo.insert()
  end
end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;poison&quot;&gt;Poison&lt;/h3&gt;
&lt;p&gt;This an example of encoder to implement inside a model class:
&lt;code class=&quot;highlighter-rouge&quot;&gt;@derive {Poison.Encoder, only: [:user_id, :token, :created_at]}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;recieve-messages&quot;&gt;Recieve messages&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Create a comsumer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;send-messages&quot;&gt;Send messages&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create a producer&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;it uses a dependency, called &lt;a href=&quot;https://github.com/jeffhsta/kafka_message_bus/&quot;&gt;kafka_message_bus&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;this is an &lt;a href=&quot;https://github.com/jeffhsta/kafka_message_bus/blob/master/lib/kafka_message_bus.ex&quot;&gt;important file&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NationBrokerMsg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UsersPushTokenProducer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NationBrokerMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:producer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NationBroker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PushToken&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@resource&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;push_token&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@topic&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;notification&quot;&lt;/span&gt; 
  &lt;span class=&quot;nv&quot;&gt;@action&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;created&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push_token_created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PushToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;@message_bus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;push_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;push_token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;@resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;@action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;source:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;topic:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@topic&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;a-context-in-phoenix&quot;&gt;A context in Phoenix&lt;/h3&gt;
&lt;p&gt;Is a parent folder that descirbes a bunch of modules.
studies resource: https://hexdocs.pm/phoenix/contexts.html
All things related to this context, shoulkd be here. i.e: CRUD, and filters, blablabla&lt;/p&gt;

&lt;h3 id=&quot;composed-query-with-ecto&quot;&gt;Composed query with Ecto&lt;/h3&gt;

&lt;p&gt;This is really good docs: https://hexdocs.pm/ecto/Ecto.Query.html&lt;/p&gt;

&lt;p&gt;def that uses query as the first parameter i.e: &lt;code class=&quot;highlighter-rouge&quot;&gt;query_all/2&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;module&quot;&gt;module&lt;/h3&gt;
&lt;p&gt;To create a module:
    Elixir files are modules.
    The last word o &lt;code class=&quot;highlighter-rouge&quot;&gt;defmodule&lt;/code&gt; by convention describes the file. 
    i.e:
    PushTokenImportRecord is push_token_import_record.&lt;/p&gt;

&lt;h1 id=&quot;docker&quot;&gt;Docker&lt;/h1&gt;
&lt;h2 id=&quot;troubleshooting-docker&quot;&gt;Troubleshooting docker&lt;/h2&gt;

&lt;p&gt;For most errors on elixir, mainly related to connection, is due to Docker, som helpfull commands are bellow to help you&lt;/p&gt;

&lt;p&gt;Remove all images:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose down # Down dockers
docker rm $(docker ps -aq) # Remove all process
docker rmi $(docker images -aq) # Remove all images
docker-compose up -d # Up docker in background
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;studie - Dependecy injection in Elixir&lt;/p&gt;

&lt;p&gt;Resources:
https://app.pluralsight.com/library/courses/elixir-getting-started
https://app.pluralsight.com/library/courses/phoenix-getting-started&lt;/p&gt;

&lt;p&gt;https://elixir-examples.github.io/examples/phoenix-framework-from-http-request-to-response&lt;/p&gt;

&lt;p&gt;CheatSheet
https://devhints.io/elixir&lt;/p&gt;

&lt;p&gt;https://devhints.io/phoenix-ecto&lt;/p&gt;

&lt;p&gt;https://learnxinyminutes.com/docs/elixir/&lt;/p&gt;

&lt;p&gt;REASTFull Api very easy to implement simple things:
https://github.com/elixir-maru/maru&lt;/p&gt;

&lt;p&gt;Also I should add a link checker to the blog :)&lt;/p&gt;

&lt;p&gt;https://github.com/BohdanOrlov/iOS-Developer-Roadmap&lt;/p&gt;

&lt;p&gt;https://medium.com/@likid.geimfari/the-list-of-interesting-open-source-projects-2daaa2153f7c&lt;/p&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">Good services to watch insde Realm nation-broker example of scheduler, translator and sending messages. notification-service. Live reloading is built-in Phoenix uses node.js Phoenix uses Brunch to build js and css assets. scheme scheme/2 Scheme is the equivalent to an SQL Table, is a macro defined in EctoScheme. use NationBorker: Import macro: The use macro is defined with using this is a good way to organize commum imports. the import macro, the alias macro, @ keyword defines a constant macro nation_broker_msg is good place to see the defines contants. On line 11 it returns the :message_bus and assign it to @message_bus Quote and unquote Serach about that, seams really cool. Spoiler: This is a way to declare differnt implementation depending on the module. Ecto To create a new table: ➜ user-service git:(CG-159_bold_calc_costs_updates) mix ecto.gen.migration create_push_token_import_records_table Ecto changeset example: defmodule NotificationService.PushToken do # This just make sure the entrance is valid, and not expose db to invalid entries, and avoid IO usage. def changeset(struct, params \ %{}) do # We need this changeset to insert things in the db, for this we need sonme transofrmations. All provided by Ecto, our little friend struct |&amp;gt; cast(params, @fields) # Make casts to adjust types, and check if anything breaks. |&amp;gt; validate_required(@required_fields) # Check no null canstraints. |&amp;gt; unique_constraint(:user_id) # Check unique_id constraint. |&amp;gt; foreign_key_constraint(:user_id) # Check for end end # This is a schema defmodule NotificationService.PushNotification.PushToken do # This just make sure the entrance is valid, and not expose db to invalid entries, and avoid IO usage. use NotificationService, :model # We need this changeset to insert things in the db, for this we need sonme transofrmations. All provided by Ecto, our little friend def changeset(struct, params \\ %{}) do struct |&amp;gt; cast(params, @fields) # Make casts to adjust types, and check if anything breaks. |&amp;gt; validate_required(@required_fields) # Check no null canstraints. |&amp;gt; unique_constraint(:user_id) # Check unique_id constraint. |&amp;gt; foreign_key_constraint(:user_id) # Check for end end defmodule NotificationServiceMsg.PushTokenConsumer do # This is a Consumer use NotificationServiceMsg, :consumer require Logger def process(%{&quot;data&quot; =&amp;gt; data, &quot;action&quot; =&amp;gt; action}) when action in [&quot;created&quot;], do: { :ok, _token } = PushNotification.insert_push_token(data) #This is a shortcut to patternmatching, in case of errors this will break in the `dead letter queue` def process(_data), do: :ok end defmodule NotificationService.PushNotification do # This is a Context. alias NotificationService.Repo alias NotificationService.PushNotification.PushToken def insert_push_token(push_token_params) do %PushToken{ id: Ecto.UUID.generate()# This add a uuid for the to_insert push token. } |&amp;gt; changeset(push_token_params) |&amp;gt; Repo.insert() end end Poison This an example of encoder to implement inside a model class: @derive {Poison.Encoder, only: [:user_id, :token, :created_at]} Recieve messages Create a comsumer Send messages Create a producer it uses a dependency, called kafka_message_bus this is an important file defmodule NationBrokerMsg.Realm.UsersPushTokenProducer do use NationBrokerMsg, :producer alias NationBroker.Realm.PushToken @resource &quot;push_token&quot; @topic &quot;notification&quot; @action &quot;created&quot; def push_token_created(push_token = %PushToken{}) do @message_bus.produce( push_token, push_token.user_id, @resource, @action, source: &quot;nation&quot;, topic: @topic ) end end A context in Phoenix Is a parent folder that descirbes a bunch of modules. studies resource: https://hexdocs.pm/phoenix/contexts.html All things related to this context, shoulkd be here. i.e: CRUD, and filters, blablabla Composed query with Ecto This is really good docs: https://hexdocs.pm/ecto/Ecto.Query.html def that uses query as the first parameter i.e: query_all/2 module To create a module: Elixir files are modules. The last word o defmodule by convention describes the file. i.e: PushTokenImportRecord is push_token_import_record. Docker Troubleshooting docker For most errors on elixir, mainly related to connection, is due to Docker, som helpfull commands are bellow to help you Remove all images: docker-compose down # Down dockers docker rm $(docker ps -aq) # Remove all process docker rmi $(docker images -aq) # Remove all images docker-compose up -d # Up docker in background studie - Dependecy injection in Elixir Resources: https://app.pluralsight.com/library/courses/elixir-getting-started https://app.pluralsight.com/library/courses/phoenix-getting-started https://elixir-examples.github.io/examples/phoenix-framework-from-http-request-to-response CheatSheet https://devhints.io/elixir https://devhints.io/phoenix-ecto https://learnxinyminutes.com/docs/elixir/ REASTFull Api very easy to implement simple things: https://github.com/elixir-maru/maru Also I should add a link checker to the blog :) https://github.com/BohdanOrlov/iOS-Developer-Roadmap https://medium.com/@likid.geimfari/the-list-of-interesting-open-source-projects-2daaa2153f7c</summary></entry><entry><title type="html">Roadmap!</title><link href="http://localhost:4000/blog/2018/02/18/roadmap.html" rel="alternate" type="text/html" title="Roadmap!" /><published>2018-02-18T00:00:00-03:00</published><updated>2018-02-18T00:00:00-03:00</updated><id>http://localhost:4000/blog/2018/02/18/roadmap</id><content type="html" xml:base="http://localhost:4000/blog/2018/02/18/roadmap.html">&lt;p&gt;I whould really like to change the font, after a fast search, I found  the &lt;a href=&quot;https://fonts.google.com/specimen/Inconsolata?selection.family=Inconsolata&quot;&gt;Inconsolata&lt;/a&gt; font. O would like to implement it all across this blog.&lt;/p&gt;

&lt;p&gt;Other thing is that I wanna create an Archive, but just after I reach 5+ blog posts.&lt;/p&gt;

&lt;p&gt;Already changed th ecolor, to look like my terminal :).&lt;/p&gt;

&lt;p&gt;Add support for pictures on the blog post suggestion.&lt;/p&gt;

&lt;p&gt;The roadmap for this blog is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Usando charles para mapear API&lt;/li&gt;
  &lt;li&gt;MITM com charles.&lt;/li&gt;
  &lt;li&gt;Usando cycript para obter chaves de API.
    &lt;ul&gt;
      &lt;li&gt;Alterando springborad tbm :DD.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Como eu fiz o renovator. Explicar engenharia reversa da criptografia.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Redesign do renovator &lt;a href=&quot;https://www.uplabs.com/posts/smart-personal-automatic&quot;&gt;design guideline&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Descriptografando apps, e fazendo Class e memory dump.&lt;/li&gt;
  &lt;li&gt;Defcon expirience. (criar album com as poucas fotos que tenho)
    &lt;ul&gt;
      &lt;li&gt;Explicar como foi tudo, nos dois anos.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Elixir and phoenix para api do renovator. Criando autenticação e job agendado.
    &lt;ul&gt;
      &lt;li&gt;Mencionar o pluralsight.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Seu app está seguro? (resumo dos anteriores)
    &lt;blockquote&gt;
      &lt;p&gt;Fazer um blog com explicações detalhadas sobre como usar o charles.&lt;/p&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Livros que marcaram minha vida.
    &lt;h1 id=&quot;important&quot;&gt;Important&lt;/h1&gt;
    &lt;p&gt;Find a way to execute script in docker to create topics.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DeepX
In a team of a fast growing US company, the main roles were to release releasse a new tool and maontain and slowly update lagacy both Android and iOS apps. Also was involved in backend development in Elixir, and frontend web in Elm.&lt;/p&gt;

&lt;p&gt;Warren Brasil
Helped finishing the iOS app in Swift. Continued with the development of the Android app in Kotlin.&lt;/p&gt;

&lt;p&gt;Apple Developer Academy | PUCRS
By using CBL, I participate on many challanges, creating many small apps, usign mulitples tecnologies and platforms as Apple Watch, Apple TV, ResearchKit, BLE, P2P cominucation.&lt;/p&gt;

&lt;p&gt;Micro G -
At&lt;/p&gt;

&lt;p&gt;Flip Studio
I was Involved in an Ojective-C project for a mobile iOS platform focoused in offline sales.&lt;/p&gt;

&lt;p&gt;Darkshine&lt;/p&gt;

&lt;p&gt;CO-Founder&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Involved in many products, for differet clients.&lt;/li&gt;
  &lt;li&gt;From conception to delivery experience.&lt;/li&gt;
  &lt;li&gt;Team management and sofrtware architecture.&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">I whould really like to change the font, after a fast search, I found the Inconsolata font. O would like to implement it all across this blog. Other thing is that I wanna create an Archive, but just after I reach 5+ blog posts. Already changed th ecolor, to look like my terminal :). Add support for pictures on the blog post suggestion. The roadmap for this blog is: Usando charles para mapear API MITM com charles. Usando cycript para obter chaves de API. Alterando springborad tbm :DD. Como eu fiz o renovator. Explicar engenharia reversa da criptografia. Redesign do renovator design guideline Descriptografando apps, e fazendo Class e memory dump. Defcon expirience. (criar album com as poucas fotos que tenho) Explicar como foi tudo, nos dois anos. Elixir and phoenix para api do renovator. Criando autenticação e job agendado. Mencionar o pluralsight. Seu app está seguro? (resumo dos anteriores) Fazer um blog com explicações detalhadas sobre como usar o charles. Livros que marcaram minha vida. Important Find a way to execute script in docker to create topics. DeepX In a team of a fast growing US company, the main roles were to release releasse a new tool and maontain and slowly update lagacy both Android and iOS apps. Also was involved in backend development in Elixir, and frontend web in Elm. Warren Brasil Helped finishing the iOS app in Swift. Continued with the development of the Android app in Kotlin. Apple Developer Academy | PUCRS By using CBL, I participate on many challanges, creating many small apps, usign mulitples tecnologies and platforms as Apple Watch, Apple TV, ResearchKit, BLE, P2P cominucation. Micro G - At Flip Studio I was Involved in an Ojective-C project for a mobile iOS platform focoused in offline sales. Darkshine CO-Founder Involved in many products, for differet clients. From conception to delivery experience. Team management and sofrtware architecture.</summary></entry><entry><title type="html">Introducing BlackDoc</title><link href="http://localhost:4000/about/me/kuquert/marcus/2012/05/14/introducing-blackdoc.html" rel="alternate" type="text/html" title="Introducing BlackDoc" /><published>2012-05-14T00:00:00-03:00</published><updated>2012-05-14T00:00:00-03:00</updated><id>http://localhost:4000/about/me/kuquert/marcus/2012/05/14/introducing-blackdoc</id><content type="html" xml:base="http://localhost:4000/about/me/kuquert/marcus/2012/05/14/introducing-blackdoc.html">&lt;p&gt;BlackDoc is a two-column &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that’s ideal for websites that require a master-detail layout for viewing of content. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler, and the &lt;a href=&quot;http://hyde.getpoole.com&quot;&gt;Hyde&lt;/a&gt; theme.&lt;/p&gt;

&lt;p&gt;I needed a two-column layout with a scrolling sidebar to publish my &lt;a href=&quot;http://karloespiritu.com/cheatsheets&quot;&gt;code cheatsheets&lt;/a&gt;, and found the &lt;a href=&quot;http://hyde.getpoole.com&quot;&gt;Hyde&lt;/a&gt; Jekyll theme to be a good starting theme. To complement the color scheme of my main &lt;a href=&quot;http://karloespiritu.com&quot;&gt;website&lt;/a&gt;, I customised the theme to make it look great in black background and changed the sidebar to display scrolling content. I created this theme because I can’t seem to find any good Jekyll theme with a master-detail layout. Hopefully, someone will find this useful as well in their own projects.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as a foundation for creating Jekyll themes. Poole-based themes, such as BlackDoc here, include the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting using Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;blackdoc-features&quot;&gt;BlackDoc Features&lt;/h3&gt;

&lt;p&gt;In addition to the features of &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt; and &lt;a href=&quot;http://hyde.getpoole.com&quot;&gt;Hyde&lt;/a&gt;, BlackDoc theme adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scrolling sidebar with a thin scrollbar to allow displaying of numerous top-level content.&lt;/li&gt;
  &lt;li&gt;Elements and classes of the Hyde theme were updated to look great in black background. Check out the &lt;a href=&quot;styles&quot;&gt;Theme Styles&lt;/a&gt; to see the stylings used in the theme.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the &lt;code class=&quot;highlighter-rouge&quot;&gt;Readme&lt;/code&gt; of &lt;a href=&quot;https://github.com/poole/poole&quot;&gt;Poole&lt;/a&gt; and &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde&lt;/a&gt; theme to learn more about the features.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;BlackDoc theme supports most modern browsers and only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;BlackDoc is a free Jekyll theme and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/karloespiritu/BlackDoc&quot;&gt;GitHub repository&lt;/a&gt; to download.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;</content><author><name>Marcus Kuquert</name></author><summary type="html">BlackDoc is a two-column Jekyll theme that’s ideal for websites that require a master-detail layout for viewing of content. It’s based on Poole, the Jekyll butler, and the Hyde theme. I needed a two-column layout with a scrolling sidebar to publish my code cheatsheets, and found the Hyde Jekyll theme to be a good starting theme. To complement the color scheme of my main website, I customised the theme to make it look great in black background and changed the sidebar to display scrolling content. I created this theme because I can’t seem to find any good Jekyll theme with a master-detail layout. Hopefully, someone will find this useful as well in their own projects. Built on Poole Poole is the Jekyll Butler, serving as a foundation for creating Jekyll themes. Poole-based themes, such as BlackDoc here, include the following: Complete Jekyll setup included (layouts, config, 404, RSS feed, posts, and example page) Mobile friendly design and development Easily scalable text and component sizing with rem units in the CSS Support for a wide gamut of HTML elements Related posts (time-based, because Jekyll) below each post Syntax highlighting using Pygments (the Python-based code snippet highlighter) BlackDoc Features In addition to the features of Poole and Hyde, BlackDoc theme adds the following: Scrolling sidebar with a thin scrollbar to allow displaying of numerous top-level content. Elements and classes of the Hyde theme were updated to look great in black background. Check out the Theme Styles to see the stylings used in the theme. Check out the Readme of Poole and Hyde theme to learn more about the features. Browser support BlackDoc theme supports most modern browsers and only compatible with Internet Explorer 9 and above. Download BlackDoc is a free Jekyll theme and hosted with GitHub. Head to the GitHub repository to download. Cheers!</summary></entry></feed>